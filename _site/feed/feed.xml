<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:base="en">
	<title>cascadia.computer</title>
	<subtitle>Hello! I am using this space to write about tech and other things I find interesting</subtitle>
	<link href="https://cascadia.computer/eleventy-base-blog/feed/feed.xml" rel="self"/>
	<link href="https://cascadia.computer/eleventy-base-blog/"/>
	<updated>2024-12-16T00:00:00Z</updated>
	<id>https://cascadia.computer</id>
	<author>
		<name>Justin Willis</name>
		<email>jgw9617@gmail.com</email>
	</author>
	
	<entry>
		<title>Bringing AI to the Browser - On-Device AI with the Web AI Toolkit</title>
		<link href="https://cascadia.computer/eleventy-base-blog/blog/ondeviceai/"/>
		<updated>2024-12-16T00:00:00Z</updated>
		<id>https://cascadia.computer/eleventy-base-blog/blog/ondeviceai/</id>
		<content type="html">&lt;p&gt;Welcome! Today we will be covering On-Device AI for Web Apps. Yes, you can run AI models on the users device, accelerated by a GPU or even NPU all from your web app, no hybrid framework or plugins needed. We will start with what On-Device AI is along with some benefits, and then we will showcase how to get started with AI on the Web with the Web AI Toolkit!&lt;/p&gt;
&lt;h2 id=&quot;what-is-on-device-ai&quot; tabindex=&quot;-1&quot;&gt;What is On-Device AI? &lt;a class=&quot;header-anchor&quot; href=&quot;https://cascadia.computer/eleventy-base-blog/blog/ondeviceai/&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;On-device AI refers to running AI models directly on the user&#39;s device, such as a GPU, NPU, or even a CPU. The key aspect is that the AI model runs locally on the user&#39;s machine, not in the cloud.&lt;/p&gt;
&lt;p&gt;This approach offers several benefits:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Privacy: Data processing happens entirely on the device, ensuring user data doesn&#39;t leave their machine.&lt;/li&gt;
&lt;li&gt;Latency and Performance: Running models locally can reduce latency and improve performance, depending on the model size.&lt;/li&gt;
&lt;li&gt;Offline Capability: It works even without an internet connection, making it ideal for users with poor network connectivity or who are offline.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;cpu-gpu-npu&quot; tabindex=&quot;-1&quot;&gt;CPU, GPU, NPU??? &lt;a class=&quot;header-anchor&quot; href=&quot;https://cascadia.computer/eleventy-base-blog/blog/ondeviceai/&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;When running on-device AI, the choice of hardware to run your model on—CPU, GPU, or NPU—can significantly impact performance and application design.&lt;/p&gt;
&lt;p&gt;CPUs are versatile and, obviously, widely available but are not optimized for the immense parallel processing required for running AI models, making them slower for running larger AI models, and potentially heavily impacting battery usage.&lt;/p&gt;
&lt;p&gt;GPUs (Graphics Processing Units), on the other hand, excel at parallel processing, enabling faster execution of AI models, but can still be power-hungry and generate significant heat, especially on laptops or mobile devices.&lt;/p&gt;
&lt;p&gt;NPUs (Neural Processing Unit) are specialized hardware designed specifically for AI workloads, offering great performance for a wide variety of models while, maybe more importantly, offering great battery life. They are however, much less common at the moment.&lt;/p&gt;
&lt;p&gt;Choosing the right hardware to run your AI workloads depends on balancing availability, power efficiency, and performance for your target use case, luckily the Web AI Toolkit handles this for you.&lt;/p&gt;
&lt;p&gt;Now that we’ve covered the benefits of On-Device AI and hardware considerations, let’s dive into implementing a common AI enabled feature, speech-to-text, using the Web AI Toolkit.&lt;/p&gt;
&lt;h2 id=&quot;web-ai-toolkit&quot; tabindex=&quot;-1&quot;&gt;Web AI Toolkit &lt;a class=&quot;header-anchor&quot; href=&quot;https://cascadia.computer/eleventy-base-blog/blog/ondeviceai/&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;h3 id=&quot;get-started-let-s-implement-speech-to-text&quot; tabindex=&quot;-1&quot;&gt;Get Started: Let&#39;s implement speech-to-text &lt;a class=&quot;header-anchor&quot; href=&quot;https://cascadia.computer/eleventy-base-blog/blog/ondeviceai/&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Now that we&#39;ve discussed the benefits of on-device AI, let&#39;s talk about how to get started implementing it in your web applications. To make this easier, we&#39;ll use a library I wrote called the &lt;a href=&quot;https://github.com/jgw96/web-ai-toolkit&quot;&gt;Web AI Toolkit&lt;/a&gt;. The toolkit&#39;s main goal is to simplify building AI features in your web apps. It makes implementing common AI features like speech-to-text and text summarization on-device incredibly easy, all with just two lines of JavaScript.&lt;/p&gt;
&lt;p&gt;To get started with the Web AI Toolkit, the first step is to install it from npm by running:&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token function&quot;&gt;npm&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;install&lt;/span&gt; web-ai-toolkit&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;With the library installed, we are ready to start using the toolkit. The &lt;a href=&quot;https://github.com/jgw96/web-ai-toolkit?tab=readme-ov-file#web-ai-toolkit&quot;&gt;GitHub README&lt;/a&gt; for the Web AI Toolkit lists all of the available features; with examples of how to use them.&lt;/p&gt;
&lt;p&gt;For our example, we&#39;ll look at implementing speech-to-text. For speech-to-text, we will import the &lt;code&gt;transcribeAudioFile&lt;/code&gt; function and pass an audio file (as a Blob) to the function. The function will then return the transcribed text from the audio.&lt;/p&gt;
&lt;pre class=&quot;language-javascript&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; transcribeAudioFile &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;web-ai-toolkit&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; audioFile &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// Your audio file Blob&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; transcription &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;transcribeAudioFile&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;audioFile&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;transcription&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&quot;how-it-works&quot; tabindex=&quot;-1&quot;&gt;How it works &lt;a class=&quot;header-anchor&quot; href=&quot;https://cascadia.computer/eleventy-base-blog/blog/ondeviceai/&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;The Web AI Toolkit integrates with HuggingFace&#39;s powerful &lt;a href=&quot;https://github.com/huggingface/transformers.js&quot;&gt;Transformers.js library&lt;/a&gt; to run AI models on-device.&lt;/p&gt;
&lt;p&gt;For example, for &lt;code&gt;transcribeAudioFile&lt;/code&gt;, the Web AI Toolkit uses an &lt;code&gt;AutomaticSpeechRecognitionPipeline&lt;/code&gt; pipeline from the Transformers.js library to actually run the model, which by default is Whisper Tiny. First, some hardware checks will happen, such as using the WebGPU API to get some information about the capabilities of your GPU, if one is available. These checks will help us choose which hardware to run our AI workload on. The toolkit then handles loading the pipeline on demand (and ensuring its only initialized once, a common performance pitfall). If a pipeline is ready to go, or has been newly initialized, it then will prepare the audio from the blob for Whisper, including combining stereo channels into one. Once this is done, the speech-to-text pipeline is ran, returning the text when available. All JavaScript running on the CPU (remember, the actual model itself is being run on the GPU on most devices) is also run in a web worker, ensuring your UI stays smooth and jank free.&lt;/p&gt;
&lt;h2 id=&quot;thanks&quot; tabindex=&quot;-1&quot;&gt;Thanks! &lt;a class=&quot;header-anchor&quot; href=&quot;https://cascadia.computer/eleventy-base-blog/blog/ondeviceai/&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;On-device AI in the browser is a game-changer for apps, offering privacy, low latency, and offline capabilities—and potentially reducing your cloud costs.&lt;/p&gt;
&lt;p&gt;Whether you&#39;re building next-generation web applications or exploring the potential of AI on the web, the Web AI Toolkit provides the tools you need to get started quickly and efficiently. Ready to try On-Device AI? Install the &lt;a href=&quot;https://github.com/jgw96/web-ai-toolkit&quot;&gt;Web AI Toolkit&lt;/a&gt; today and build your first AI-powered web app in minutes!&lt;/p&gt;
</content>
	</entry>
	
	<entry>
		<title>Progressive Web Apps - An Intro + Answering some common questions</title>
		<link href="https://cascadia.computer/eleventy-base-blog/blog/pwacommonquestions/"/>
		<updated>2024-07-24T00:00:00Z</updated>
		<id>https://cascadia.computer/eleventy-base-blog/blog/pwacommonquestions/</id>
		<content type="html">&lt;p&gt;Hello! Today I want to dive a little deeper and answer some common questions about Progressive Web Applications (PWAs) that I get but don&#39;t see answers often to &amp;quot;in the wild.&amp;quot; Let&#39;s start with a small intro, and then we will dive into the questions! We will then wrap up with an overview of some advantages PWAs have over platform-specific (native) apps.&lt;/p&gt;
&lt;h2 id=&quot;what-is-a-pwa&quot; tabindex=&quot;-1&quot;&gt;What is a PWA? &lt;a class=&quot;header-anchor&quot; href=&quot;https://cascadia.computer/eleventy-base-blog/blog/pwacommonquestions/&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Progressive Web Applications (PWAs), at their most basic, are web apps that use modern web capabilities; at least a Web App Manifest and Service Worker, to enable advanced, native app-like experiences on a user&#39;s device. PWAs can be installed through the browser, which will give the user a special install prompt if the browser detects a Web App Manifest and Service Worker, and installed through app stores, such as the Microsoft Store, Google Play, and the Meta app store.&lt;/p&gt;
&lt;p&gt;Beyond just a Web App Manifest and Service Worker, PWAs also have access to many advanced, low-level capabilities that web apps historically have not had access to. This includes things such as:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://docs.pwabuilder.com/#/home/native-features?id=shortcuts&quot;&gt;Shortcuts (also known as Jumplists on certain OS’s)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://medium.com/going-fullstack/interact-with-bluetooth-devices-using-the-web-bluetooth-api-7984b2509939&quot;&gt;Bluetooth&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://onnxruntime.ai/docs/get-started/with-javascript/web.html&quot;&gt;On-device, hardware-accelerated AI, including GPU and NPU&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://developer.chrome.com/docs/capabilities/nfc&quot;&gt;NFC&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://developer.chrome.com/docs/capabilities/usb&quot;&gt;USB&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/WebGL_API&quot;&gt;3D and 2D graphics&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://developer.chrome.com/blog/webgpu-cross-platform/&quot;&gt;GPU access for rendering and compute&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://developer.chrome.com/blog/imagecapture/&quot;&gt;Camera access and control&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://docs.pwabuilder.com/#/home/native-features?id=push-notifications&quot;&gt;Push Notifications&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://docs.pwabuilder.com/#/home/native-features?id=window-controls-overlay&quot;&gt;Custom Titlebars&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://docs.pwabuilder.com/#/home/native-features?id=web-share-api&quot;&gt;Share&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/HTML_Drag_and_Drop_API&quot;&gt;Drag and Drop&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://learn.microsoft.com/en-us/fluent-ui/web-components/&quot;&gt;Fluent Design&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://developer.chrome.com/blog/foldable-apis-ot&quot;&gt;Foldable and dual-screen device support&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://docs.pwabuilder.com/#/home/native-features?id=how-to-share-to-your-pwa&quot;&gt;Receiving shared content&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://learn.microsoft.com/en-us/microsoft-edge/progressive-web-apps-chromium/how-to/offline#file-system-access&quot;&gt;Writing and reading from the native file system&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://developer.chrome.com/docs/web-platform/view-transitions/&quot;&gt;Animations, including page transitions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://learn.microsoft.com/en-us/microsoft-edge/progressive-web-apps-chromium/how-to/service-workers&quot;&gt;Can work totally offline&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://docs.pwabuilder.com/#/home/native-features?id=background-sync&quot;&gt;Sync data in the background&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Web_Components&quot;&gt;Web Components, a UI component model&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;And much more!&lt;/p&gt;
&lt;p&gt;Many of these APIs have historically required you to use Electron, Cordova, or some other WebView-based solution, but you can now achieve the same functionality using JavaScript running in your browser.&lt;/p&gt;
&lt;h2 id=&quot;common-questions-concerns&quot; tabindex=&quot;-1&quot;&gt;Common Questions / Concerns &lt;a class=&quot;header-anchor&quot; href=&quot;https://cascadia.computer/eleventy-base-blog/blog/pwacommonquestions/&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;While the above description gives a good overview of PWAs, let&#39;s dive into some common questions I get about them, and hopefully, my answers provide clarity.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;PWAs are slow by design.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This is false and based on the fact that the web has a low entry point for developers, meaning there are many developers building their first app, etc., which yes, are not going to be the best apps in the world. Native apps can also be very slow, buggy, etc. In fact, there are whole operating systems where the main app platform is Web Tech, and users/the tech media praise that operating system for being smooth and lightweight. Finally, I urge developers to use the average device their users have (for laptops, normally around a 400-dollar laptop if you look at the most sold laptops on Amazon) and try apps built with different tech.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Aren’t the APIs mentioned above Web APIs, not PWA APIs?&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Yes! Many of the APIs can be used in a normal web app running in a browser tab. However, others, like shortcuts, for example, require an installed PWA. A simple way to look at it is “All web APIs are PWA APIs, but not all PWA APIs are web APIs.” However, all the capabilities are still just JavaScript running in the browser engine, the only difference is whether your app is running as an installed app (the user has installed it from the browser or app stores) or in a browser tab.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Can PWAs also run in a browser tab?&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Yes! PWAs are basically advanced web apps, so they work perfectly fine in a normal browser tab, just like any other web app or website. However, they can also run as installed apps! This means that users can get into your experience in whichever way they choose, whether through app stores or browser, with no install needed to get started through the browser!&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Are PWAs still using the same browser engine, JavaScript engine, etc. as my default browser?&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Yes! You can think of installed PWAs as running in a “headless” browser tab. It looks like a WebView app, but it&#39;s running in the browser.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Are PWAs supported in all browsers?&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Yes, but with some caveats that you may be used to from feature checking for APIs such as Promises in the past. So, all PWAs are just HTML, CSS, and JavaScript, at least initially served from a web server, just like anything on the web. Because of this, they will work, at least at some basic level, on any browser! However, this does not mean that, if your app relies on one of the advanced APIs I mentioned above, it will work in any browser. While many of the above APIs are supported cross-browser, some are Chromium-only, and some are Chromium and Firefox only. Safari has historically had very limited support for anything beyond the basics in a PWA; this has been changing fast over the last 2-3 years because of social pressure, political pressure, and market pressures.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Like in a WebView-based app, can I write code that runs outside of the browser that I can call from my JavaScript?&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;No, you cannot. This would break a few of the key advantages PWAs have, including the fact that this would prevent the app from running in the browser, plus it would mean that your app is calling code that is running outside of the browser&#39;s sandbox, potentially opening security holes.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;What operating systems support PWAs?&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Any OS that can run a modern browser, especially chromium-based browsers. Windows, Android, macOS, ChromeOS, and Linux all have great support for PWAs. iOS and iPadOS have been held back for years on PWAs, but this is rapidly improving over the last two years.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Can I manage PWAs with Intune or other MDM providers?&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;While it would depend on the MDM provider you are using, for Intune at least, the answer is yes. PWAs can be installed and managed through Intune just like any other application. &lt;a href=&quot;https://learn.microsoft.com/en-us/surface-hub/install-pwa-surface-hub&quot;&gt;More Info&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;On Windows, can PWAs use the Windows Copilot Library and Windows Copilot Runtime?&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The answer is a combination of yes and no.&lt;/p&gt;
&lt;p&gt;No, PWAs cannot explicitly use the Windows Copilot Library; however, studio effects are automatically supported in PWAs, Edge has an &lt;a href=&quot;https://developer.chrome.com/docs/capabilities/shape-detection&quot;&gt;OCR capable API&lt;/a&gt;, and Phi Mini, which Microsoft offers specific web optimized versions for, can be run using WebNN.&lt;/p&gt;
&lt;p&gt;On the Windows Copilot Runtime, WebNN, which is considered part of the Runtime, is what PWAs and other web-based apps would use. This uses DML under the hood and supports the same operators, models, hardware, etc.&lt;/p&gt;
&lt;p&gt;So in summary, PWAs can access everything except recall in the Windows Copilot Library even though the library does not have explicit support for Web Apps, and yes, PWAs can use the Windows Copilot Runtime by using WebNN.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://learn.microsoft.com/en-us/windows/ai/directml/webnn-overview&quot;&gt;More Info&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Hopefully, this answers some of the questions you had about Progressive Web Apps!&lt;/p&gt;
&lt;h2 id=&quot;advantages-of-pwas-over-native-apps&quot; tabindex=&quot;-1&quot;&gt;Advantages of PWAs over native apps &lt;a class=&quot;header-anchor&quot; href=&quot;https://cascadia.computer/eleventy-base-blog/blog/pwacommonquestions/&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;PWAs are not the right stack for every app type out there, and there are of course places where platform-specific (native) apps will have their place, but PWAs can work for a large majority of apps AND provide some key advantages over native apps:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;True write once / deploy everywhere experience, even to app stores! Because a PWA is just a web app, it will run anywhere with no code changes, no WebView, no plugins that you must code around to get working in the browser, no platform-specific code, etc.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Can be installed from both the browser and app stores, widening the reach of your application and enabling you to acquire users from multiple channels at once, with just one codebase.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Users can jump right into your app through the browser, no need to install anything. This leads to much lower friction-to-entry for users.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Tend to be lighter weight on both storage size and resource usage than a native app, even with the same functionality.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Its all just standard web development skills, so if you are a web developer, you can be an app developer with PWAs, no new learning needed.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;They run in the browser&#39;s sandbox, with much finer-grained user control over specific actions. For example, to access the clipboard, a user will see a permission prompt first, making it clear what is happening to the user. This is a much stronger level of control than users have over native apps. PWAs cannot start up random processes, cannot start reading and writing random files, and have heavy protection against fingerprinting, etc.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;disadvantages-of-pwas-over-native-apps&quot; tabindex=&quot;-1&quot;&gt;Disadvantages of PWAs over native apps &lt;a class=&quot;header-anchor&quot; href=&quot;https://cascadia.computer/eleventy-base-blog/blog/pwacommonquestions/&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;If your app relies on a specific feature in an operating system that does not have an equivalent web API, a PWA is going to be a non-starter.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;If you or your team do not know HTML, CSS, and Javascript, a PWA is going to be a non-starter.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;If your app relies on extremely low-level code to get the lowest level latency, such as some types of audio DAWs, etc., then a native app is going to be your best bet. Note though, there are plenty of video editors, audio editors, etc. that are web-based.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;If there is a possibility the app will need to be used without ever having access to the network, a PWA is not going to be the best fit.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;If you are building an app that is only meant to run on one OS, you may want to consider a native app, although a WebView app can work very well here too.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Get started building your new PWA today at &lt;a href=&quot;https://docs.pwabuilder.com/#/home/pwa-workshop&quot;&gt;Progressive Web App Intro Workshop&lt;/a&gt;.&lt;/p&gt;
</content>
	</entry>
	
	<entry>
		<title>Upgrade your Progressive Web App</title>
		<link href="https://cascadia.computer/eleventy-base-blog/blog/upgradeyourpwa/"/>
		<updated>2023-12-21T00:00:00Z</updated>
		<id>https://cascadia.computer/eleventy-base-blog/blog/upgradeyourpwa/</id>
		<content type="html">&lt;p&gt;So, you are building a PWA (Progressive Web Application) and you really want to nail that &amp;quot;app&amp;quot; user experience. For example, you want your app to show in the share sheet to handle shared files, or you may want a custom titlebar for your app on desktop OS&#39;s. These are the kinds of small things that can really make or break your user experience. This also used to be a place where the web fell short of native platforms, but with the rise of &lt;a href=&quot;https://developer.chrome.com/docs/capabilities&quot;&gt;Project Fugu&lt;/a&gt; over the last few years, that gap has closed fast. Let&#39;s explore just a few of the API&#39;s you can use to implement these features in your PWA.&lt;/p&gt;
&lt;h2 id=&quot;shortcuts&quot; tabindex=&quot;-1&quot;&gt;Shortcuts &lt;a class=&quot;header-anchor&quot; href=&quot;https://cascadia.computer/eleventy-base-blog/blog/upgradeyourpwa/&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;https://cascadia.computer/eleventy-base-blog/img/shortcuts.png&quot; alt=&quot;Shortcuts pane on Windows 11&quot;&gt;&lt;/p&gt;
&lt;p&gt;The &lt;a href=&quot;https://docs.pwabuilder.com/#/home/native-features?id=shortcuts&quot;&gt;Web Shortcuts API&lt;/a&gt; is a feature that allows you to create shortcuts (basically links) to key actions or pages within your app. These shortcuts are displayed by the operating system when the user interacts with the app’s icon, such as right-clicking on Windows or long-pressing on Android. You define your shortcuts by using the shortcuts member in the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/Manifest&quot;&gt;web app manifest&lt;/a&gt; as shown in the snippet below. The shortcuts member is an array of objects, each representing a shortcut with a name, a URL, an optional description, and an optional icon.&lt;/p&gt;
&lt;pre class=&quot;language-json&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-json&quot;&gt;&lt;span class=&quot;token property&quot;&gt;&quot;shortcuts&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;token property&quot;&gt;&quot;name&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;Home&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;token property&quot;&gt;&quot;url&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;/&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;token property&quot;&gt;&quot;description&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;Head straight to the home page&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;token property&quot;&gt;&quot;icons&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
          &lt;span class=&quot;token property&quot;&gt;&quot;src&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;assets/shortcuts/home-outline.png&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
          &lt;span class=&quot;token property&quot;&gt;&quot;sizes&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;96x96&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
          &lt;span class=&quot;token property&quot;&gt;&quot;type&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;image/png&quot;&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
      &lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;token property&quot;&gt;&quot;name&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;Explore&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;token property&quot;&gt;&quot;url&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;/home?tab=search&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;token property&quot;&gt;&quot;description&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;Head straight to the explore page&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;token property&quot;&gt;&quot;icons&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
          &lt;span class=&quot;token property&quot;&gt;&quot;src&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;assets/shortcuts/search-outline.png&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
          &lt;span class=&quot;token property&quot;&gt;&quot;sizes&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;96x96&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
          &lt;span class=&quot;token property&quot;&gt;&quot;type&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;image/png&quot;&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
      &lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;share-share-content-and-handle-shared-content&quot; tabindex=&quot;-1&quot;&gt;Share: Share content AND handle shared content &lt;a class=&quot;header-anchor&quot; href=&quot;https://cascadia.computer/eleventy-base-blog/blog/upgradeyourpwa/&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;h3 id=&quot;share-content-from-your-app&quot; tabindex=&quot;-1&quot;&gt;Share content from your app &lt;a class=&quot;header-anchor&quot; href=&quot;https://cascadia.computer/eleventy-base-blog/blog/upgradeyourpwa/&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;The Web Share API is a feature that allows websites to share text, links, files, and other content using the native share UI of the device or desktop. This means that users can share content from your PWA to any other app, even native apps, just like they normally would, and without any kind of custom share UI. This API is also relatively simple to use, with only a few lines of JavaScript needed:&lt;/p&gt;
&lt;pre class=&quot;language-javascript&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; shareData &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token literal-property property&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;Web Share API&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token literal-property property&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;Learn how to use the Web Share API&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token literal-property property&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;https://docs.pwabuilder.com/#/home/native-features?id=web-share-api&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;await&lt;/span&gt; navigator&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;share&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;shareData&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;catch&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;err&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;err&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&quot;handle-content-shared-to-your-app&quot; tabindex=&quot;-1&quot;&gt;Handle content shared to your app &lt;a class=&quot;header-anchor&quot; href=&quot;https://cascadia.computer/eleventy-base-blog/blog/upgradeyourpwa/&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;To enable your PWA to handle content shared from other apps, such as files, you need to use the share target API. This makes your PWA show in the share sheet when, for example, a user shares a photo from the Photos app on their device, and allows you to take action to handle that shared content. This API is a bit more complicated to implement than the above APIs, with both an object you have to add to your Web App Manifest, and some JavaScript to handle the shared content in your own app. While this post will not act as a tutorial on how to implement this feature, the PWABuilder team at Microsoft has a &lt;a href=&quot;https://docs.pwabuilder.com/#/home/native-features?id=how-to-share-to-your-pwa&quot;&gt;great tutorial&lt;/a&gt; on how to implement this API.&lt;/p&gt;
&lt;h2 id=&quot;custom-titlebar&quot; tabindex=&quot;-1&quot;&gt;Custom titlebar &lt;a class=&quot;header-anchor&quot; href=&quot;https://cascadia.computer/eleventy-base-blog/blog/upgradeyourpwa/&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;https://cascadia.computer/eleventy-base-blog/img/titlebar.png&quot; alt=&quot;Custom titlebar in an app&quot;&gt;&lt;/p&gt;
&lt;p&gt;And finally, we are on to the Window Controls Overlay API. The Window Controls Overlay API allows you to customize the appearance and functionality of the title bar area of your PWA. By using this API, you can display your own HTML over the entire surface area of the app window, while retaining the system-wide controls. This is also a relatively simple API to implement, with a single object to add to your web app manifest to turn this feature on. You then can use CSS to style HTML in the titlebar area of your PWA. The Web Platform also exposes some system CSS variables to make implementing custom titlebars easier, such as:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;titlebar-area-x&lt;/code&gt;: the distance from the left of the viewport where the title bar area appears&lt;/li&gt;
&lt;li&gt;&lt;code&gt;titlebar-area-y&lt;/code&gt;: the distance from the top of the viewport where the title bar area appears&lt;/li&gt;
&lt;li&gt;&lt;code&gt;titlebar-area-width&lt;/code&gt;: the width of the title bar area&lt;/li&gt;
&lt;li&gt;&lt;code&gt;titlebar-area-height&lt;/code&gt;: the height of the title bar area&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;For more on how to implement this feature, check out &lt;a href=&quot;https://docs.pwabuilder.com/#/home/native-features?id=window-controls-overlay&quot;&gt;this tutorial&lt;/a&gt;.&lt;/p&gt;
</content>
	</entry>
	
	<entry>
		<title>What is a PWA?</title>
		<link href="https://cascadia.computer/eleventy-base-blog/blog/whatisapwa/"/>
		<updated>2023-07-25T00:00:00Z</updated>
		<id>https://cascadia.computer/eleventy-base-blog/blog/whatisapwa/</id>
		<content type="html">&lt;p&gt;Progressive Web Applications&lt;/p&gt;
&lt;p&gt;You have probably heard of them, maybe have read a few articles on them, but, one thing I have personally found lacking is a clear answer to &amp;quot;What is a PWA?&amp;quot;. Today, I hope to answer that question!&lt;/p&gt;
&lt;h2 id=&quot;what-is-a-pwa&quot; tabindex=&quot;-1&quot;&gt;What is a PWA? &lt;a class=&quot;header-anchor&quot; href=&quot;https://cascadia.computer/eleventy-base-blog/blog/whatisapwa/&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;At their simplest, a PWA is a web app that uses a &lt;a href=&quot;https://docs.pwabuilder.com/#/home/pwa-intro?id=web-app-manifests&quot;&gt;Web Manifest&lt;/a&gt;, &lt;a href=&quot;https://www.cloudflare.com/learning/ssl/what-is-https/&quot;&gt;https&lt;/a&gt; and a &lt;a href=&quot;https://docs.pwabuilder.com/#/home/pwa-intro?id=service-workers&quot;&gt;Service Worker&lt;/a&gt;. However, they are much much more than the technical requirements. Let&#39;s dive in!&lt;/p&gt;
&lt;h3 id=&quot;best-of-web-native&quot; tabindex=&quot;-1&quot;&gt;Best of Web + Native &lt;a class=&quot;header-anchor&quot; href=&quot;https://cascadia.computer/eleventy-base-blog/blog/whatisapwa/&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Progressive Web Applications bring together the best of the web with the best of installed applications. Like a web app, they:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Are cross-platform, including CPU architecture, by default&lt;/li&gt;
&lt;li&gt;Can be found and shared with just a URL&lt;/li&gt;
&lt;li&gt;Instant updates, no need to wait on the app stores&lt;/li&gt;
&lt;li&gt;Truly one codebase that runs everywhere&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;However, like a native app, they also:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Can use low level APIs to integrate with the OS. For example, PWAs can use &lt;a href=&quot;https://docs.pwabuilder.com/#/home/native-features?id=shortcuts&quot;&gt;shortcuts&lt;/a&gt;, &lt;a href=&quot;https://docs.pwabuilder.com/#/home/native-features?id=badging&quot;&gt;badging&lt;/a&gt; and even things like &lt;a href=&quot;https://docs.pwabuilder.com/#/home/native-features?id=window-controls-overlay&quot;&gt;custom titlebars&lt;/a&gt; and &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Web_Bluetooth_API&quot;&gt;Bluetooth&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Can be published and installed from the app stores&lt;/li&gt;
&lt;li&gt;Show up as an app on the users OS, for example, on Windows they show up in the title bar, can be pinned to the desktop, show up in the settings app etc, just like a UWP app.&lt;/li&gt;
&lt;li&gt;Can work offline&lt;/li&gt;
&lt;li&gt;Work reliably on a bad network connection&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This is a combination of features that, in the past, required a &amp;quot;hybrid&amp;quot; solution such as Electron, Cordova or Capacitor. However, with the power of the modern web platform, you can achieve the same with just web tech!&lt;/p&gt;
&lt;h3 id=&quot;learn-more-on-capabilities&quot; tabindex=&quot;-1&quot;&gt;Learn more on capabilities &lt;a class=&quot;header-anchor&quot; href=&quot;https://cascadia.computer/eleventy-base-blog/blog/whatisapwa/&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;The &lt;a href=&quot;https://developer.chrome.com/blog/fugu-status/&quot;&gt;Project Fugu Initiative&lt;/a&gt; is the best place to start learning about all the capabilities that PWAs have access too.&lt;/p&gt;
&lt;h2 id=&quot;why-build-a-pwa&quot; tabindex=&quot;-1&quot;&gt;Why build a PWA? &lt;a class=&quot;header-anchor&quot; href=&quot;https://cascadia.computer/eleventy-base-blog/blog/whatisapwa/&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Ther are many reasons you may want to build a PWA. Lets go over some of the common developer facing reasons, and then we will cover some benefits for your users!&lt;/p&gt;
&lt;h3 id=&quot;developer-facing&quot; tabindex=&quot;-1&quot;&gt;Developer facing &lt;a class=&quot;header-anchor&quot; href=&quot;https://cascadia.computer/eleventy-base-blog/blog/whatisapwa/&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Truly one codebase that runs everywhere. No need for a seperate android codebase, iOS codebase etc. No need for a hybrid codebase that has seperate code running in seperate environments. This is all pure web tech.&lt;/li&gt;
&lt;li&gt;Already a Web Developer? You have the skills to start building a PWA!&lt;/li&gt;
&lt;li&gt;No need for a thousand dollar laptop just so things compile quickly. PWAs can be built on anything from an affordable Windows device to a Chromebook.&lt;/li&gt;
&lt;li&gt;Develop the app in your browser, with extremely quick turnaround on code changes etc.&lt;/li&gt;
&lt;li&gt;App Distribution: You users can find your app anywhere, from the web to the app stores.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;user-facing&quot; tabindex=&quot;-1&quot;&gt;User facing &lt;a class=&quot;header-anchor&quot; href=&quot;https://cascadia.computer/eleventy-base-blog/blog/whatisapwa/&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Much lighter weight than many native apps, and definitely lighter weight than Electron, Cordova or Capacitor apps. This means less storage space taken by your app, quicker start times and more for your users.&lt;/li&gt;
&lt;li&gt;Inclusiveness: PWAs dont require expensive, powerful devices to function well.&lt;/li&gt;
&lt;li&gt;Reliable on any network connection.&lt;/li&gt;
&lt;li&gt;Users can use your app in their preferred manner, from the browser to installing from an app store.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;examples&quot; tabindex=&quot;-1&quot;&gt;Examples &lt;a class=&quot;header-anchor&quot; href=&quot;https://cascadia.computer/eleventy-base-blog/blog/whatisapwa/&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The following are some of my favorite PWAs that I use all the time:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://squoosh.app/&quot;&gt;Squoosh&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://twitter.com/home&quot;&gt;Twitter&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.microsoft.com/store/productId/9PNZMMXQHQZ5&quot;&gt;Elk&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.recordergo.app&quot;&gt;Memos AI (built by me)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://designer.microsoft.com/&quot;&gt;Microsoft Designer&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://vscode.dev/&quot;&gt;VSCode&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Get started building your PWA today with &lt;a href=&quot;https://docs.pwabuilder.com/#/starter/quick-start&quot;&gt;PWABuilder&lt;/a&gt;!!!!&lt;/p&gt;
</content>
	</entry>
	
	<entry>
		<title>Building Memos AI, a developers perspective</title>
		<link href="https://cascadia.computer/eleventy-base-blog/blog/memosai/"/>
		<updated>2023-05-15T00:00:00Z</updated>
		<id>https://cascadia.computer/eleventy-base-blog/blog/memosai/</id>
		<content type="html">&lt;p&gt;Hello! I recently released an app I&#39;ve been working, &lt;a href=&quot;https://www.recordergo.app&quot;&gt;Memos AI&lt;/a&gt;, and I wanted to talk a bit about how I built this app. Before we dive in, lets touch on exactly what Memos AI is.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Memos AI is a new voice memos app that uses artificial intelligence to provide highly accurate transcriptions. The app is available on Windows, Android, Linux and iOS, and it can be used to transcribe any type of audio recording, including lectures, meetings, and interviews.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;It is also open source, and can be found &lt;a href=&quot;https://github.com/jgw96/audio-notes-go&quot;&gt;here on Github&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;With that out of the way, what are we going to cover exactly? Let&#39;s touch on:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Why I went with a &lt;a href=&quot;https://learn.microsoft.com/en-us/microsoft-edge/progressive-web-apps-chromium/&quot;&gt;Progressive Web App&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;My tech stack&lt;/li&gt;
&lt;li&gt;Publishing&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Let&#39;s dive in!&lt;/p&gt;
&lt;h2 id=&quot;why-a-pwa-progressive-web-application&quot; tabindex=&quot;-1&quot;&gt;Why a PWA (Progressive Web Application) &lt;a class=&quot;header-anchor&quot; href=&quot;https://cascadia.computer/eleventy-base-blog/blog/memosai/&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;PWAs are web apps that are installable on a user&#39;s device and can be used like any other native app. They offer a number of benefits over traditional web apps, including:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Faster loading times: PWAs are cached on the user&#39;s device, which means that they load much faster than traditional web apps.&lt;/li&gt;
&lt;li&gt;Better offline support: PWAs can work offline, which is important for users who don&#39;t have a reliable internet connection.&lt;/li&gt;
&lt;li&gt;More engaging user experience: PWAs can be installed on the user&#39;s home screen and can be used like any other native app. This makes them more engaging and easier to use.&lt;/li&gt;
&lt;li&gt;Available in App Stores: PWAs can be published to the Microsoft Store, the Google Play STore and other stores, unlike traditional web apps.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;PWAs also offer benefits over a native app. For example:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Cross-Platform out of the box: PWAs offer one of the only true &amp;quot;build once, run everywhere&amp;quot; experiences. You can take your single codebase and deploy it to the web AND the app stores with no code changes.&lt;/li&gt;
&lt;li&gt;arm64 support: PWAs run natively on both arm and x86/64 devices, with no extra effort needed from the developer&lt;/li&gt;
&lt;li&gt;Wide Reach: Progressive Web Apps allow you to reach users wherever they already are, whether that is in their web browser, or in an app store.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;tech-stack&quot; tabindex=&quot;-1&quot;&gt;Tech Stack &lt;a class=&quot;header-anchor&quot; href=&quot;https://cascadia.computer/eleventy-base-blog/blog/memosai/&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Ahh the age old tech stack discussion. First, as you always should with a tech stack discussion, lets discuss what my user goals are for Memos AI:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;TRULY cross-platform: Not only should Memos AI work on any OS, it should also work on ANY device, no matter how powerful that device is, or what its network connection is like&lt;/li&gt;
&lt;li&gt;Fast, on any device and any network connection&lt;/li&gt;
&lt;li&gt;Simple: I am a fan of simplicity over almost everything, in most cases atleast. Simplicity, from my experience, leads to fast apps that work better for users.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;With this in mind (and yes I also work on the &lt;a href=&quot;https://www.pwabuilder.com&quot;&gt;PWABuilder project&lt;/a&gt;) I decided on the following stack:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The &lt;a href=&quot;https://github.com/pwa-builder/pwa-starter&quot;&gt;PWABuilder PWA Starter&lt;/a&gt; for the app itself.&lt;/li&gt;
&lt;li&gt;An Azure Web App for Containers for my backend. My server is a simple Express based Node.js server running in a Docker container.&lt;/li&gt;
&lt;li&gt;For transcriptions: The Azure Speech SDK for live transcriptions, and the OpenAI Whisper model for final transcriptions.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;publishing&quot; tabindex=&quot;-1&quot;&gt;Publishing &lt;a class=&quot;header-anchor&quot; href=&quot;https://cascadia.computer/eleventy-base-blog/blog/memosai/&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;For publishing, I wanted to take full advantage of the fact that my app is cross-platform. I deployed to the web first, using &lt;a href=&quot;https://learn.microsoft.com/en-us/azure/static-web-apps/overview&quot;&gt;Azure Static Web Apps&lt;/a&gt;. Static Web Apps, especially when used with Github Actions, makes it incredibly easy to deploy a web app. You get HTTPS out of the box, and other features such as:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Azure Functions support&lt;/li&gt;
&lt;li&gt;Easy Database connection&lt;/li&gt;
&lt;li&gt;Pre-Configured authentication&lt;/li&gt;
&lt;li&gt;Available CDN&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I then decided that my first store I would publish to is the Microsoft Store. Using PWABuilder, it was as easy as grabbing the URL that Azure Static Web Apps created for my app, going to https://www.pwabuilder.com, and clicking a few buttons. PWABuilder then gave me an MSIX that you can submit to the Microsoft Store, just like a UWP app. And just like that, my app, still with only a single codebase, is &lt;a href=&quot;https://www.microsoft.com/store/productId/9PP8DL2QTJSG&quot;&gt;in the Microsoft Store&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;And thats it! To get started building a new app like I did here, go to &lt;a href=&quot;https://www.pwabuilder.com/&quot;&gt;PWABuilder&lt;/a&gt; and click &amp;quot;Start a new PWA&amp;quot;.&lt;/p&gt;
</content>
	</entry>
	
	<entry>
		<title>How do I, a web developer, build an app?</title>
		<link href="https://cascadia.computer/eleventy-base-blog/blog/pwasinappstores/"/>
		<updated>2023-05-09T00:00:00Z</updated>
		<id>https://cascadia.computer/eleventy-base-blog/blog/pwasinappstores/</id>
		<content type="html">&lt;p&gt;It&#39;s a story as old as time itself, you are a web developer and you want to build an app. You want that app to be on the web of course, but ALSO be in the app stores. What do you do? You can go the hybrid route, like with React Native, or you can build a Progressive Web App(PWA). But, if you go the PWA route, can you put it in the app stores still? And, if you go the hybrid route, what do you lose on the web side of things? Let&#39;s dive in.&lt;/p&gt;
&lt;h2 id=&quot;what-is-a-pwa-what-is-a-hybrid-app&quot; tabindex=&quot;-1&quot;&gt;What is a PWA? What is a hybrid app? &lt;a class=&quot;header-anchor&quot; href=&quot;https://cascadia.computer/eleventy-base-blog/blog/pwasinappstores/&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;h3 id=&quot;pwa&quot; tabindex=&quot;-1&quot;&gt;PWA &lt;a class=&quot;header-anchor&quot; href=&quot;https://cascadia.computer/eleventy-base-blog/blog/pwasinappstores/&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;A Progressive Web Application (PWA) is a type of web app that combines the best features of native apps and websites. A PWA can run on any device and browser, and can work offline or on low-quality networks. A PWA can also access device capabilities such as camera, microphone, push notifications, and more through web standard APIs. A PWA is fast, reliable, and engaging for users, and can improve the performance and user experience of web apps.&lt;/p&gt;
&lt;p&gt;However, PWAs may have less access to operating system-specific APIs than hybrid applications. This issue has been addressed in a large way by the &lt;a href=&quot;https://developer.chrome.com/blog/fugu-status/&quot;&gt;Project Fugu&lt;/a&gt; initiative. Nonetheless, hybrid and native apps will always have access to the latest native capabilities quicker than PWAs.&lt;/p&gt;
&lt;h3 id=&quot;hybrid-app&quot; tabindex=&quot;-1&quot;&gt;Hybrid App &lt;a class=&quot;header-anchor&quot; href=&quot;https://cascadia.computer/eleventy-base-blog/blog/pwasinappstores/&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;A hybrid app uses a common web technology stack, such as HTML, CSS, and JavaScript, to create a user interface that can run on multiple platforms. Additionally, a hybrid app can use a native wrapper such as React Native or Flutter along with plugins to access the device’s features. However, this also leads to the largest advantage for React Native: platform-specific native capabilities can be accessed relatively easily. In contrast, in the web world, capabilities must be built into the browser as web APIs which can take much longer to actually be implemented in browsers.&lt;/p&gt;
&lt;p&gt;This native wrapper means that hybrid apps must be distributed as “bundles” that include both the web code and native code for each platform. This makes them larger than PWAs and more difficult to maintain.&lt;/p&gt;
&lt;h2 id=&quot;pwas-in-the-app-stores&quot; tabindex=&quot;-1&quot;&gt;PWAs in the app stores &lt;a class=&quot;header-anchor&quot; href=&quot;https://cascadia.computer/eleventy-base-blog/blog/pwasinappstores/&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;One of the biggest disadvantages traditionally of PWAs was the fact that you could not ship them to app stores without wrapping them in a hybrid wrapper. There are multiple problems with this, however the two most impactful are that you then no longer have one codebase that can easily run on the web, and that your code may need to be updated to work in a webview compared to the actual browser.&lt;/p&gt;
&lt;p&gt;However, this is no longer the case. There are projects, such as &lt;a href=&quot;https://www.pwabuilder.com&quot;&gt;PWABuilder&lt;/a&gt; (disclaimer, I work on PWABuilder at Microsoft) that allow you to easily package your PWA for the Microsoft Store and Google Play, with experimental support for the Apple App Store. Importantly, this works by using the native support built into these stores for PWAs to enable you to ship your PWA with no wrapper needed. You simply package your PWA as an MSIX or APK (for Windows and Android respectively) and publish them to the store, just like you would with a native app. And, I think this is really cool, all you need is the URL to your PWA to do this. There are no wrappers, no extra build tools, no native SDKs to install.&lt;/p&gt;
&lt;h2 id=&quot;hybrid-apps-on-the-web&quot; tabindex=&quot;-1&quot;&gt;Hybrid apps on the web &lt;a class=&quot;header-anchor&quot; href=&quot;https://cascadia.computer/eleventy-base-blog/blog/pwasinappstores/&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Let&#39;s look at this from the &lt;a href=&quot;https://github.com/facebook/react-native&quot;&gt;React Native&lt;/a&gt; point of view.&lt;/p&gt;
&lt;p&gt;React Native is a framework that allows you to build native mobile apps using JavaScript and React. However, you may also want to ship your React Native app to the web, so that users can access it from any browser. How do you do that?&lt;/p&gt;
&lt;p&gt;One option is to use react-native-web, a library that implements React Native components and APIs for the web. This way, you can reuse most of your React Native code and create a web version of your app with minimal changes. To use react-native-web, you need to install it as a dependency and configure your bundler (such as webpack) to alias react-native to react-native-web. You also need to make sure that your app uses only the components and APIs that are supported by react-native-web, or provide fallbacks for the ones that are not.&lt;/p&gt;
&lt;p&gt;Another option is to use Expo, a platform that simplifies the development and deployment of React Native apps. Expo provides a web browser target that allows you to run your React Native app in the browser using react-native-web under the hood. To use Expo, you need to install the Expo CLI and initialize your project with expo init. Then, you can run expo start --web to launch your app in the browser. You can also use Expo to build and publish your web app with expo build:web and expo publish:web.&lt;/p&gt;
&lt;p&gt;As you can see, while it is possible, it does take extra tools, and work, to ship your hybrid app to the web. In fact, if your components are not supported by react-native-web, it can be ALOT of work.&lt;/p&gt;
&lt;h2 id=&quot;next-steps&quot; tabindex=&quot;-1&quot;&gt;Next Steps &lt;a class=&quot;header-anchor&quot; href=&quot;https://cascadia.computer/eleventy-base-blog/blog/pwasinappstores/&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;At the end of the day, whether you should build a PWA or hybrid app can come down to many factors. My goal with this blog is not to say which one you should choose, as it is app and situation specific. My goal was instead to show that shipping to the app stores is not a blocker for going with a PWA, and that it is possible to take your React Native app to the web.&lt;/p&gt;
&lt;p&gt;Be on the lookout for a post about when you should build a PWA, and when you should build a hybrid app. Thanks!&lt;/p&gt;
</content>
	</entry>
	
	<entry>
		<title>Hello World</title>
		<link href="https://cascadia.computer/eleventy-base-blog/blog/helloworld/"/>
		<updated>2023-05-08T00:00:00Z</updated>
		<id>https://cascadia.computer/eleventy-base-blog/blog/helloworld/</id>
		<content type="html">&lt;p&gt;Hello all!&lt;/p&gt;
&lt;p&gt;First, awkward intro time:&lt;/p&gt;
&lt;p&gt;My name is Justin Willis. I do software engineering and lots of hiking. Tech is my main passion, especially web technology and building apps / sites / tools that work for EVERYONE, not just folx with 1000$+ devices.&lt;/p&gt;
&lt;p&gt;This is my third reboot, lol, of my personal blog. I am going to use this space to talk about:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Tech&lt;/li&gt;
&lt;li&gt;Video Games&lt;/li&gt;
&lt;li&gt;Nature&lt;/li&gt;
&lt;li&gt;Electric Vehicles&lt;/li&gt;
&lt;li&gt;Mental Health&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;While I am writing content, here are some links:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://tech.lgbt/@lilPWA&quot;&gt;Mastodon&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/jgw96&quot;&gt;GitHub&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://twitter.com/Justinwillis96&quot;&gt;Elon Hellscape&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Current Projects I am actually focusing on:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://www.mammothsocial.app&quot;&gt;Mammoth Web (no not the iOS app), a cross-platform, AI enhanced Mastodon client&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://white-rock-01cf9891e.3.azurestaticapps.net/&quot;&gt;Memos AI, Memos AI allows you to record notes with ACCURATE transcriptions, powered by AI, on any device&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;At work (Microsoft) I work on Progressive Web Applications and the &lt;a href=&quot;https://www.pwabuilder.com&quot;&gt;PWABuilder&lt;/a&gt; project.&lt;/p&gt;
</content>
	</entry>
</feed>
